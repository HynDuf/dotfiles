snippet hyn
    #include <bits/stdc++.h>

    using namespace std;
    #define DB(X) { cout << #X << " = " << (X) << '\n'; }
    #define DB1(A, _) { cout << #A << "[" << _ << "] = " << (A[_]) << '\n'; }
    #define DB2(A, _, __) { cout << #A << "[" << _ << "][" << __ << "] = " << (A[_][__]) << '\n'; }
    #define DB3(A, _, __, ___) { cout << #A << "[" << _ << "][" << __ << "][" << ___ << "] = " << (A[_][__][___]) << '\n'; }
    #define PR(A, l, r) { cout << '\n'; for (int _ = l; _ <= r; ++_) DB1(A, _); cout << '\n';}
    #define sz(x) ((int) (x).size())
    #define all(v) (v).begin(), (v).end()
    #define fi first
    #define se second

    using ll = long long;
    using ld = long double;
    using ii = pair<int, int>;

    int32_t main() {
    #ifdef HynDuf
        freopen("${1:A}.inp", "r", stdin);
        freopen("${2:A}.out", "w", stdout);
    #else
        ios_base::sync_with_stdio(false);
        cin.tie(nullptr);
    #endif
        $0
        return 0;
    }
    /* stuff you should look for
     * int overflow, array bounds
     * special cases (n=1?)
     * do smth instead of nothing and stay organized
     * WRITE STUFF DOWN
     * DON'T GET STUCK ON ONE APPROACH
     */
